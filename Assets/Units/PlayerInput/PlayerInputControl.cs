//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Units/PlayerInput/PlayerInputControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace RPG.Units.Player
{
    public partial class @PlayerInputControl: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputControl"",
    ""maps"": [
        {
            ""name"": ""MoveMap"",
            ""id"": ""6c14bc16-f7fe-4ce2-a555-8ba3a0d9c780"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""da6151f0-7d7f-4aa4-951d-93f6f5730e94"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f7c7db99-282f-4959-8c85-c6db54eeb7cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RHandAttack"",
                    ""type"": ""Button"",
                    ""id"": ""5b740a7c-a74d-476a-b3f2-d6168c506dce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LHandAttack"",
                    ""type"": ""Button"",
                    ""id"": ""3fc50f0e-4e07-48e5-b0a8-a16e8ab5a260"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""3a3d1610-86cb-458b-83a7-42c124c70afe"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3a84fbdd-928a-43c1-93c9-bde53e1a64c4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c92efeaa-e834-4abd-8f5b-51507ee1b760"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""123e96ce-6815-46fe-a1d8-21262fa86c9d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6227ee3d-cd51-4dbc-b40a-60a0d0475867"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4efcb4c1-e1e9-409e-908f-c2cc9a0ceb65"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""525e3868-cc54-45aa-8c76-4cd1c9562e06"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RHandAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d35db2ba-3b03-4fde-8c67-e74c7ccf130b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LHandAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // MoveMap
            m_MoveMap = asset.FindActionMap("MoveMap", throwIfNotFound: true);
            m_MoveMap_Move = m_MoveMap.FindAction("Move", throwIfNotFound: true);
            m_MoveMap_Jump = m_MoveMap.FindAction("Jump", throwIfNotFound: true);
            m_MoveMap_RHandAttack = m_MoveMap.FindAction("RHandAttack", throwIfNotFound: true);
            m_MoveMap_LHandAttack = m_MoveMap.FindAction("LHandAttack", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MoveMap
        private readonly InputActionMap m_MoveMap;
        private List<IMoveMapActions> m_MoveMapActionsCallbackInterfaces = new List<IMoveMapActions>();
        private readonly InputAction m_MoveMap_Move;
        private readonly InputAction m_MoveMap_Jump;
        private readonly InputAction m_MoveMap_RHandAttack;
        private readonly InputAction m_MoveMap_LHandAttack;
        public struct MoveMapActions
        {
            private @PlayerInputControl m_Wrapper;
            public MoveMapActions(@PlayerInputControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_MoveMap_Move;
            public InputAction @Jump => m_Wrapper.m_MoveMap_Jump;
            public InputAction @RHandAttack => m_Wrapper.m_MoveMap_RHandAttack;
            public InputAction @LHandAttack => m_Wrapper.m_MoveMap_LHandAttack;
            public InputActionMap Get() { return m_Wrapper.m_MoveMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MoveMapActions set) { return set.Get(); }
            public void AddCallbacks(IMoveMapActions instance)
            {
                if (instance == null || m_Wrapper.m_MoveMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MoveMapActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @RHandAttack.started += instance.OnRHandAttack;
                @RHandAttack.performed += instance.OnRHandAttack;
                @RHandAttack.canceled += instance.OnRHandAttack;
                @LHandAttack.started += instance.OnLHandAttack;
                @LHandAttack.performed += instance.OnLHandAttack;
                @LHandAttack.canceled += instance.OnLHandAttack;
            }

            private void UnregisterCallbacks(IMoveMapActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @RHandAttack.started -= instance.OnRHandAttack;
                @RHandAttack.performed -= instance.OnRHandAttack;
                @RHandAttack.canceled -= instance.OnRHandAttack;
                @LHandAttack.started -= instance.OnLHandAttack;
                @LHandAttack.performed -= instance.OnLHandAttack;
                @LHandAttack.canceled -= instance.OnLHandAttack;
            }

            public void RemoveCallbacks(IMoveMapActions instance)
            {
                if (m_Wrapper.m_MoveMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMoveMapActions instance)
            {
                foreach (var item in m_Wrapper.m_MoveMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MoveMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MoveMapActions @MoveMap => new MoveMapActions(this);
        public interface IMoveMapActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnRHandAttack(InputAction.CallbackContext context);
            void OnLHandAttack(InputAction.CallbackContext context);
        }
    }
}
